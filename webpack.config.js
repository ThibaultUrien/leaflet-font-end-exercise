const createStyledComponentsTransformer =
  require("typescript-plugin-styled-components").default;
const package = require("./package.json");
const ForkedTsChecker = require("fork-ts-checker-webpack-plugin");
const HtmlPlugin = require("html-webpack-plugin");
const path = require("path");
const TsconfigPathsPlugin = require("tsconfig-paths-webpack-plugin");

const styledComponentsTransformer = createStyledComponentsTransformer({
  // Define the display name of element generated by the styled component
  // lib in a way that minimize risque of class name collision, even if this project is used in a larger app
  getDisplayName(fileName, bindingName) {
    return `${package.name}-${bindingName || fileName}`;
  },
});

module.exports = (env, argv) =>
  argv.mode === "development" ? devConfig() : prodConfig();

const devConfig = () => {
  const config = baseConfig();
  config.output = { publicPath: "/" };

  // We don't have html to bundle, this is just used to inject the
  // script in the dev html file to allow preview during development
  config.plugins.push(
    new HtmlPlugin({
      template: path.resolve(__dirname, "src/index-dev.html"),
    })
  );

  config.devtool = "inline-source-map";

  return config;
};
const prodConfig = () => {
  const config = baseConfig();
  config.output = {
    filename: "[name].js",
    path: path.resolve(__dirname, "public/dist"),
    libraryTarget: "umd",
  };

  config.plugins.push(
    new HtmlPlugin(
      {
        filename: path.resolve(__dirname, "index.html"),
        template: path.resolve(__dirname, "src/index-github.html"),
        inject: true,
      }
    )
  );

  return config;
};
const baseConfig = () => ({
  entry: "./src/index.tsx",
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        use: [
          {
            loader: "ts-loader",
            options: {
              transpileOnly: true,
              getCustomTransformers: () => ({
                before: [styledComponentsTransformer],
              }),
            },
          },
        ],
        exclude: /node_modules/,
      },
      {
        test: /\.(png|woff|woff2|eot|ttf)$/,
        type: "asset/inline",
      },
      {
        test: /\.svg$/,
        use: ["svg-react-loader"],
      },
    ],
  },
  plugins: [new ForkedTsChecker()],
  resolve: {
    extensions: [".tsx", ".ts", ".js"],
    // Automatically define aliases based on the paths in tsconfig
    plugins: [new TsconfigPathsPlugin()],
  },
  devServer: {
    hot: true,
  },
});
